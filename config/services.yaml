# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    redis_dns: 'redis://%env(resolve:REDIS_PASSWORD)%@%env(resolve:REDIS_HOST)%:%env(resolve:REDIS_PORT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Service
    app.cache.redis_provider:
        class: Redis
        public: true
        factory: [ 'Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection' ]
        arguments:
            - '%redis_dns%'
            - { retry_interval: 2, timeout: 10 }
    cache.adapter.null:
        class: Symfony\Component\Cache\Adapter\NullAdapter
        arguments: [ ~ ] # small trick to avoid arguments errors on compile-time.

    # Controller
    App\Controller\:
        resource: '../src/Controller/'
        tags: [ 'controller.service_arguments' ]

    # Listeners
    app.event_listener.exception_listener:
        class: App\EventListener\ExceptionListener
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }
